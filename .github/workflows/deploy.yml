# Simple workflow for deploying static content to GitHub Pages
name: Deploy static of alooooha.com

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "staticPages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: 天翼云静态页面
      url: https://www.alooooha.com
    runs-on: ubuntu-latest
    env: # 在这里定义环境变量
      USER_NAME: alooooha
      IP: 60.188.247.209
      SSH_PRIVATE_KEY: ${{ secrets.GITHUBKEY }} // 私匙

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GITHUBKEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ env.IP }} >> ~/.ssh/known_hosts
          echo "-----------------------------------------------"
          echo "SSH Key print"
          echo "secrets.githubKey: ${{ secrets.GITHUBKEY }}"
          echo "-----------------------------------------------"
          ls ./
          echo "-----------------------------------------------"
          ls ~/
          echo "-----------------------------------------------"
          ls ~/.ssh

      - name: 部署到天翼云
        run: |
          echo "-----------------------------------------------"
          echo "SSH Key print"
          echo "secrets.githubKey: ${{ secrets.GITHUBKEY }}"
          echo "-----------------------------------------------"
          ls ./
          echo "-----------------------------------------------"
          ls ~/
          echo "-----------------------------------------------"
          ls ~/.ssh
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.USER_NAME }}@${{ env.IP }} "echo 'SSH connection successful'"



          scp -r ./* ${{ env.USER_NAME }}@${{ env.IP }}:/www/wwwroot/alooooha.com
